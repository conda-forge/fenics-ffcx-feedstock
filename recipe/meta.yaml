{% set name = "fenics-ffcx-ufcx" %}
{% set version = "0.7.0" %}

# pins are usually updated on minor bumps:
# basix is currently co-versioned with ffcx
{% set major_minor = version.rsplit(".", 1)[0] %}
{% set ufl_version = "2023.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/fenics/ffcx/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 7f3c3ca91d63ce7831d37799cc19d0551bdcd275bdfa4c099711679533dd1c71
build:
  number: 0
  skip: true  # [win]

outputs:
  - name: fenics-ufcx
    script: build-ufcx.sh
    build:
      noarch: generic
      ignore_run_exports:
        # we don't use the compiler, but cmake still needs it
        - {{ compiler("c") }}  # [linux]
    requirements:
      build:
        - cmake
        - make
        - {{ compiler("c") }}  # [linux]
    test:
      script: test-ufcx.sh
      files:
        - test-ufcx
      requires:
        - pkg-config
        - cmake
        - make
        - {{ compiler("cxx") }}
      commands:
        - test -f ${PREFIX}/include/ufcx.h
        - pkg-config --cflags ufcx
  - name: fenics-ffcx
    build:
      script: $PYTHON -m pip install -vv --no-deps .
      noarch: python
    requirements:
      host:
        - python >=3.7
        - pip
        - setuptools >=58
        - wheel
      run:
        - python >=3.7
        - setuptools
        - numpy
        - cffi
        - fenics-basix {{ major_minor }}.*
        - fenics-ufl {{ ufl_version }}.*
    test:
      files:
        - test-ffcx
      requires:
        - pip
        - pytest >=6
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
      imports:
        - ffcx
      commands:
        - pytest -v test-ffcx

about:
  home: https://fenicsproject.org
  summary: The FEniCSx Form Compiler
  description: |
    FFCx is a new version of the FEniCS Form Compiler.
    It is being actively developed and is compatible with DOLFINx.

    FFCx is a compiler for finite element variational forms.
    From a high-level description of the form in the Unified Form Language (UFL),
    it generates efficient low-level C code that can be used to assemble the corresponding discrete operator (tensor).
    In particular, a bilinear form may be assembled into a matrix and a linear form may be assembled into a vector.
    FFCx may be used either from the command line (by invoking the ffcx command) or as a Python module (import ffcx).
  license: LGPL-3.0-or-later
  license_family: LGPL
  license_file: COPYING.LESSER
  doc_url: https://docs.fenicsproject.org/ffcx/v{{ version }}/
  dev_url: https://github.com/fenics/ffcx

extra:
  feedstock-name: fenics-ffcx
  recipe-maintainers:
    - minrk
